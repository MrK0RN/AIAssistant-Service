import os
import json
import requests
from flask import Flask, request
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ ---
VERIFY_TOKEN = os.getenv("WEBHOOK_VERIFY_TOKEN")
PAGE_ACCESS_TOKEN = os.getenv("FACEBOOK_PAGE_ACCESS_TOKEN")
ASSISTANT_API_URL = os.getenv("ASSISTANT_API_URL")
ASSISTANT_ID = os.getenv("ASSISTANT_ID") # –ï—Å–ª–∏ –≤–∞—à API –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç assistant_id

if not all([VERIFY_TOKEN, PAGE_ACCESS_TOKEN, ASSISTANT_API_URL, ASSISTANT_ID]):
    raise ValueError("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WEBHOOK_VERIFY_TOKEN, FACEBOOK_PAGE_ACCESS_TOKEN, ASSISTANT_API_URL, ASSISTANT_ID.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Instagram —á–µ—Ä–µ–∑ Graph API ---
def send_instagram_message(recipient_id, message_text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Instagram Direct —á–µ—Ä–µ–∑ Facebook Graph API.
    """
    url = f"https://graph.facebook.com/v19.0/{os.getenv('FACEBOOK_PAGE_ID')}/messages"
    # –î–ª—è Instagram Direct API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Messenger API, –Ω–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    # Recipient ID - —ç—Ç–æ Instagram Scoped ID, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞.
    payload = {
        "recipient": {"id": recipient_id},
        "message": {"text": message_text},
        "messaging_type": "RESPONSE",
        "access_token": PAGE_ACCESS_TOKEN
    }
    headers = {"Content-Type": "application/json"}

    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status() # –í—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è 4xx/5xx –æ—à–∏–±–æ–∫
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {recipient_id}: {message_text[:50]}...")
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Instagram: {e}")
        if response is not None:
            print(f"–û—Ç–≤–µ—Ç API: {response.text}")
        return None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—à–∏–º API –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ---
def get_assistant_response(user_text, thread_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–∞—à API –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    payload = {
        "text": user_text,
        "thread": thread_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º thread_id –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞
        "assistant_id": ASSISTANT_ID
    }
    headers = {"Content-Type": "application/json"}

    try:
        response = requests.post(ASSISTANT_API_URL, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        api_data = response.json()
        return api_data.get("message", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

# --- –í–µ–±—Ö—É–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç ---
@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    if request.method == "GET":
        # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")

        if mode and token:
            if mode == "subscribe" and token == VERIFY_TOKEN:
                print("‚úÖ WEBHOOK_VERIFIED")
                return challenge, 200
            else:
                return "VERIFICATION_FAILED", 403
        return "Missing parameters", 400

    elif request.method == "POST":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        data = request.json
        print(f"Received webhook event: {json.dumps(data, indent=2)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Instagram Direct
        if data.get("object") == "instagram":
            for entry in data.get("entry", []):
                for messaging_event in entry.get("messaging", []):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
                    if messaging_event.get("message"):
                        sender_id = messaging_event["sender"]["id"] # ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        message_text = messaging_event["message"].get("text")

                        if message_text:
                            print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_id}: {message_text}")
                            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ API –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                            assistant_reply = get_assistant_response(message_text, sender_id) # sender_id –∫–∞–∫ thread_id

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Instagram
                            if assistant_reply:
                                send_instagram_message(sender_id, assistant_reply)
                            else:
                                print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è {sender_id}")
                        else:
                            print(f"‚ùó –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_id}")

        return "EVENT_RECEIVED", 200 # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, —á—Ç–æ–±—ã Facebook –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –æ—Ç–ø—Ä–∞–≤–∫—É

# –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ gunicorn –∏–ª–∏ –¥—Ä—É–≥–æ–π WSGI-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä...")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))