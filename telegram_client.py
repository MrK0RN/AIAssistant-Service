import asyncio
import aiohttp
from telethon import TelegramClient, events
from telethon.tl.types import PeerUser
import json
import config

class TelegramAsyncBot:
    def __init__(self, credentials, api_url, assistant_id):
        self.credentials = credentials.split("|")
        self.password = ''
        if len(self.credentials)>3:
            self.password = self.credentials[3]
        self.api_url = api_url
        self.assistant_id = assistant_id
        self.client = TelegramClient(
            'session_name',
            self.credentials[1],
            self.credentials[2]
        )

        if "proxy" in credentials:
            self.client.set_proxy(credentials["proxy"])

    async def get_activation_code_from_api(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API"""
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"http://{config.web_url}/api/telegramCodeAPI.php",
                    params={
                        'hash': self.credentials.get('user_hash'),
                        'integration_id': self.credentials.get('integration_id')
                    }
                ) as response:
                    data = await response.json()
                    return data.get('code', '')
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API: {e}")
            return ''

    async def login(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—Ö–æ–¥ –≤ Telegram"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
            async def code_callback():
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ credentials
                if 'activation_code' in self.credentials:
                    return self.credentials['activation_code']

                # –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
                api_code = await self.get_activation_code_from_api()
                if api_code:
                    return api_code

                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ input
                return input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ')

            await self.client.start(
                phone=lambda: self.credentials[0],
                password=lambda: self.credentials.get('password', ''),
                code_callback=code_callback
            )
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Telegram!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            return False

    async def send_to_api(self, text: str, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ API –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.api_url,
                    json={
                        "text": text,
                        "thread": user_id,
                        "assistant_id": self.assistant_id
                    },
                    timeout=5
                ) as response:
                    api_data = await response.json()
                    return api_data.get("message", "‚ùå –ù–µ—Ç –ø–æ–ª—è 'message' –≤ –æ—Ç–≤–µ—Ç–µ API")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ API: {str(e)[:50]}")
            return None

    async def process_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
            if event.out or not isinstance(event.peer_id, PeerUser):
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
            reply = await self.send_to_api(event.text, event.sender_id)
            if not reply:
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await event.respond(reply)
            print(f"üí¨ –û—Ç–≤–µ—Ç –¥–ª—è {event.sender_id}: {reply[:20]}...")

        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)[:50]}")

    async def get_unread_dialogs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            dialogs = await self.client.get_dialogs()
            return [d for d in dialogs if d.unread_count > 0]
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return []

    async def process_unread_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            unread_dialogs = await self.get_unread_dialogs()
            for dialog in unread_dialogs:
                messages = await self.client.get_messages(dialog.entity, limit=dialog.unread_count)
                for message in reversed(messages):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                    if not message.out and not message.read:
                        await self.process_message(message)
                        await message.mark_read()
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {e}")

    async def run_bot(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        if not await self.login():
            return

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.client.add_event_handler(
            self.process_message,
            events.NewMessage(incoming=True)
        )

        print("üîç –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        async with self.client:
            while True:
                try:
                    await self.process_unread_messages()
                    await asyncio.sleep(10)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
                except Exception as e:
                    print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                    await asyncio.sleep(30)